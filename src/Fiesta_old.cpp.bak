#include <Arduino.h>
#include <SPI.h>

/**
   Copyright (c) 2017, OCEAN
   All rights reserved.
   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
   1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
   3. The name of the author may not be used to endorse or promote products derived from this software without specific prior written permission.
   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/





#include <ArduinoJson.h>

#include "OneM2MClient.h"
#include "m0_ota.h"

#include "TasFiestaSensor.h"

#define LEDPIN 13

// const String place = "office";
const String place = "filab";
// const String place = "seminar";
// const String place = "hallway";
const String number = "10";

bool CheckCO2Sensor() {
    if (place == "hallway" && (number == "01" || number == "03" || number == "05")) {
        return true;
    }
    else if (place == "office" && (number == "01" || number == "10" || number == "13")) {
        return true;
    }
    else if (place == "filab" && (number == "02" || number == "04" || number == "09")) {
        return true;
    }
    else if (place == "seminar" && (number == "01")) {
        return true;
    }
    else {
        return false;
    }
}
const bool co2 = CheckCO2Sensor();

const String name = place + "_" + number;
const String AE_ID = "S" + place + number;
const String AE = "office2017_" + name;

const String FIRMWARE_VERSION = "1.0.0.1";

const String MQTT_BROKER_IP = "203.253.128.161";
const uint16_t MQTT_BROKER_PORT = 1883;
OneM2MClient nCube(MQTT_BROKER_IP, MQTT_BROKER_PORT, AE_ID); // AE-ID

TasFiestaSensor TasFiesta;

unsigned long req_previousMillis = 0;
const long req_interval = 2000;

unsigned long pir_sensing_previousMillis = 0;
const long pir_sensing_interval = (1000 * 600);

unsigned long light_sensing_previousMillis = 0;
const long light_sensing_interval = (1000 * 600);

unsigned long temp_sensing_previousMillis = 0;
const long temp_sensing_interval = (1000 * 600);

unsigned long hum_sensing_previousMillis = 0;
const long hum_sensing_interval = (1000 * 600);

unsigned long co2_sensing_previousMillis = 0;
const long co2_sensing_interval = (1000 * 600);

short action_flag = 0;
short sensing_flag = 0;
short control_flag = 0;

String noti_con = "";

char body_buff[400];  //for inputting data to publish
char req_id[10];       //for generating random number for request packet id

String resp_rqi = "";

String state = "init";

uint8_t g_idx = 0;

String curValue = "";
String curValue2 = "";
String curValue3 = "";
String curValue4 = "";
String curValue5 = "";

uint8_t preHum = 10;
double preTemp = 25.0;

double tempSum[3];
double tempAvg = 0.0;
int tempidx[3] = {0, 0, 0};
int tempCnt = 0;
double _tempAvgPre = 0.0;
int tempFlag = 1;

/*************************** Sketch Code ************************************/

void rand_str(char *dest, size_t length) {
    char charset[] = "0123456789"
            "abcdefghijklmnopqrstuvwxyz"
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    while (length-- > 0) {
        size_t index = (double) rand() / RAND_MAX * (sizeof charset - 1);
        *dest++ = charset[index];
    }
    *dest = '\0';
}

void resp_callback(String topic, JsonObject &root) {
    int response_code = root["rsc"];
    String request_id = String(req_id);
    String response_id = root["rqi"];

    if (request_id == response_id) {
        if (action_flag == 0) {
            if (response_code == 2000 || response_code == 2001 || response_code == 2002 || response_code == 4105) {
                action_flag = 1;
                if(nCube.resource[g_idx].status == 0) {
                    nCube.resource[g_idx].status = 1;
                }
                else {
                    nCube.resource[g_idx].status = 2;
                }
            }
            else if (response_code == 4004) {
                if(state == "delete_sub") {
                    action_flag = 1;
                    if(nCube.resource[g_idx].status == 0) {
                        nCube.resource[g_idx].status = 1;
                    }
                    else {
                        nCube.resource[g_idx].status = 2;
                    }
                }
            }
        }

        digitalWrite(LEDPIN, LOW);
        Serial.print(topic);
        Serial.println(F(" - RESP_TOPIC receive a message."));
    }
}

void noti_callback(String topic, JsonObject &root) {
    int c_idx = 0;

    if (co2)
        c_idx++;

    if (state == "create_cin") {
        if (root["pc"]["m2m:sgn"]["sur"] == (nCube.resource[6 + c_idx].to + "/" + nCube.resource[6 + c_idx].rn)) {
            String con = root["pc"]["m2m:sgn"]["nev"]["rep"]["m2m:cin"]["con"];
            noti_con = con;

            const char *rqi = root["rqi"];
            resp_rqi = String(rqi);
            control_flag = 1;
        }
        if (root["pc"]["m2m:sgn"]["sur"] == (nCube.resource[7 + c_idx].to + "/" + nCube.resource[7 + c_idx].rn)) {
            String con = root["pc"]["m2m:sgn"]["nev"]["rep"]["m2m:cin"]["con"];
            noti_con = con;

            const char *rqi = root["rqi"];
            resp_rqi = String(rqi);
            control_flag = 2;
        }
        if (nCube.resource_count >  9 + c_idx) {
            if (root["pc"]["m2m:sgn"]["sur"] == (nCube.resource[8 + c_idx].to + "/" + nCube.resource[8 + c_idx].rn)) {
                String con = root["pc"]["m2m:sgn"]["nev"]["rep"]["m2m:cin"]["con"];
                noti_con = con;

                const char *rqi = root["rqi"];
                resp_rqi = String(rqi);
                control_flag = 3;
            }
        }
        if (nCube.resource_count >  10 + c_idx) {
            if (root["pc"]["m2m:sgn"]["sur"] == (nCube.resource[9 + c_idx].to + "/" + nCube.resource[9 + c_idx].rn)) {
                String con = root["pc"]["m2m:sgn"]["nev"]["rep"]["m2m:cin"]["con"];
                noti_con = con;

                const char *rqi = root["rqi"];
                resp_rqi = String(rqi);
                control_flag = 4;
            }
        }
    }
}

void buildResource() {
    // temperally build resource structure into Mobius as oneM2M IoT Platform

    // AE resource
    uint8_t index = 0;
    nCube.resource[index].ty = "2";
    nCube.resource[index].to = "/Mobius";
    nCube.resource[index].rn = AE;
    nCube.resource[index++].status = 0;

    // Container resource
    nCube.resource[index].ty = "3";
    nCube.resource[index].to = "/Mobius/" + nCube.resource[0].rn;
    nCube.resource[index].rn = "update";                 // guide: do no modify, fix container name for OTA - nCube.resource[1].rn
    nCube.resource[index++].status = 0;

    nCube.resource[index].ty = "3";
    nCube.resource[index].to = "/Mobius/office2017";
    nCube.resource[index].rn = "pir_" + name;
    nCube.resource[index++].status = 0;

    nCube.resource[index].ty = "3";
    nCube.resource[index].to = "/Mobius/office2017";
    nCube.resource[index].rn = "light_" + name;
    nCube.resource[index++].status = 0;

    nCube.resource[index].ty = "3";
    nCube.resource[index].to = "/Mobius/office2017";
    nCube.resource[index].rn = "temp_" + name;
    nCube.resource[index++].status = 0;

    nCube.resource[index].ty = "3";
    nCube.resource[index].to = "/Mobius/office2017";
    nCube.resource[index].rn = "hum_" + name;
    nCube.resource[index++].status = 0;

    if (co2) {
        nCube.resource[index].ty = "3";
        nCube.resource[index].to = "/Mobius/office2017";
        nCube.resource[index].rn = "co2_" + name;
        nCube.resource[index++].status = 0;
    }

    // Subscription resource
    nCube.resource[index].ty = "23";
    nCube.resource[index].to = "/Mobius/" + nCube.resource[0].rn + '/' + nCube.resource[1].rn;
    nCube.resource[index].rn = "sub";
    nCube.resource[index++].status = 0;

    nCube.resource[index].ty = "23";
    nCube.resource[index].to = "/Mobius/office2017/temp_calibrator_" + place + "_01";
    nCube.resource[index].rn = "sub_" + name;
    nCube.resource[index++].status = 0;

    if (place == "filab" || place == "office") {
        nCube.resource[index].ty = "23";
        nCube.resource[index].to = "/Mobius/office2017/temp_calibrator_" + place + "_02";
        nCube.resource[index].rn = "sub_" + name;
        nCube.resource[index++].status = 0;
    }

    if (place == "filab") {
        nCube.resource[index].ty = "23";
        nCube.resource[index].to = "/Mobius/office2017/temp_calibrator_" + place + "_03";
        nCube.resource[index].rn = "sub_" + name;
        nCube.resource[index++].status = 0;
    }

    nCube.resource_count = index;
}

uint32_t sequence = 0;
void publisher() {
    int i = 0;

    if (state == "create_ae") {
        Serial.print(state);
        Serial.print(" - ");
        if (action_flag == 1) {
            for (i = 0; i < nCube.resource_count; i++) {
                if (nCube.resource[i].ty == "2" && nCube.resource[i].status == 0) {
                    action_flag = 0;
                    sequence = 0;

                    g_idx = i;

                    rand_str(req_id, 8);
                    Serial.print(String(sequence));
                    Serial.print(" - ");
                    Serial.println(String(req_id));
                    nCube.createAE(req_id, i, "3.14");
                    digitalWrite(LEDPIN, HIGH);
                    break;
                }
            }

            if(action_flag == 1) {
                state = "create_cnt";
                Serial.println("");
            }
        }
        else {
            sequence++;
            if(sequence > 2) {
                action_flag = 1;
            }
            Serial.println(String(sequence));
        }
    }

    if (state == "create_cnt") {
        Serial.print(state);
        Serial.print(" - ");
        if (action_flag == 1) {
            for (i = 0; i < nCube.resource_count; i++) {
                if (nCube.resource[i].ty == "3" && nCube.resource[i].status == 0) {
                    action_flag = 0;
                    sequence = 0;

                    g_idx = i;

                    rand_str(req_id, 8);
                    Serial.print(String(sequence));
                    Serial.print(" - ");
                    Serial.println(String(req_id));
                    nCube.createCnt(req_id, i);
                    digitalWrite(LEDPIN, HIGH);
                    break;
                }
            }

            if(action_flag == 1) {
                state = "delete_sub";
                Serial.println("");
            }
        }
        else {
            sequence++;
            if(sequence > 2) {
                action_flag = 1;
            }
            Serial.println(String(sequence));
        }
    }

    if (state == "delete_sub") {
        Serial.print(state);
        Serial.print(" - ");
        if (action_flag == 1) {
            for (i = 0; i < nCube.resource_count; i++) {
                if (nCube.resource[i].ty == "23" && nCube.resource[i].status == 0) {
                    action_flag = 0;
                    sequence = 0;

                    g_idx = i;

                    rand_str(req_id, 8);
                    Serial.print(String(sequence));
                    Serial.print(" - ");
                    Serial.println(String(req_id));
                    nCube.deleteSub(req_id, i);
                    digitalWrite(LEDPIN, HIGH);
                    break;
                }
            }

            if(action_flag == 1) {
                state = "create_sub";
                Serial.println("");
            }
        }
        else {
            sequence++;
            if(sequence > 2) {
                action_flag = 1;
            }
            Serial.println(String(sequence));
        }
    }

    if (state == "create_sub") {
        Serial.print(state);
        Serial.print(" - ");
        if (action_flag == 1) {
            for (i = 0; i < nCube.resource_count; i++) {
                if (nCube.resource[i].ty == "23" && nCube.resource[i].status == 1) {
                    action_flag = 0;
                    sequence = 0;

                    g_idx = i;

                    rand_str(req_id, 8);
                    Serial.print(String(sequence));
                    Serial.print(" - ");
                    Serial.println(String(req_id));
                    nCube.createSub(req_id, i);
                    digitalWrite(LEDPIN, HIGH);
                    break;
                }
            }

            if(action_flag == 1) {
                state = "create_cin";
                Serial.println("");
            }
        }
        else {
            sequence++;
            if(sequence > 2) {
                action_flag = 1;
            }
            Serial.println(String(sequence));
        }
    }

    else if (state == "create_cin") {
    }
}

void setup() {
    //while (!Serial);
    Serial.begin(115200);

    nCube.begin(place);

    nCube.setCallback(resp_callback, noti_callback);

    TasFiesta.begin(co2);

    buildResource();

    state = "create_ae";
    action_flag = 1;
}

void loop() {
    if(nCube.chkConnect()) {
        if (OTAClient.finished()) {
            unsigned long currentMillis = millis();

            if (currentMillis - req_previousMillis >= req_interval) {
                req_previousMillis = currentMillis;
                publisher();
            }
            else if (sensing_flag == 0 && currentMillis - pir_sensing_previousMillis >= pir_sensing_interval) {
                pir_sensing_previousMillis = currentMillis;

                if (state == "create_cin") {
                    // guide: in here generate sensing data
                    // if get sensing data directly, assign curValue sensing data and set sensing_flag to 1
                    // if request sensing data to sensor, set sensing_flag to 0, in other code of receiving sensing data, assign curValue sensing data and set sensing_flag to 1
                    if(TasFiesta.getPir()) {
                        curValue = String(1);
                    }
                    else {
                        curValue = String(0);
                    }

                    sensing_flag = 1;
                }
            }
            else if (sensing_flag == 0 && currentMillis - light_sensing_previousMillis >= light_sensing_interval) {
                light_sensing_previousMillis = currentMillis;

                if (state == "create_cin") {
                    // guide: in here generate sensing data
                    // if get sensing data directly, assign curValue sensing data and set sensing_flag to 1
                    // if request sensing data to sensor, set sensing_flag to 0, in other code of receiving sensing data, assign curValue sensing data and set sensing_flag to 1
                    curValue2 = String(TasFiesta.getLux());

                    sensing_flag = 2;
                }
            }
            else if (sensing_flag == 0 && currentMillis - temp_sensing_previousMillis >= temp_sensing_interval) {
                temp_sensing_previousMillis = currentMillis;

                if (state == "create_cin") {
                    // guide: in here generate sensing data
                    // if get sensing data directly, assign curValue sensing data and set sensing_flag to 1
                    // if request sensing data to sensor, set sensing_flag to 0, in other code of receiving sensing data, assign curValue sensing data and set sensing_flag to 1
                    preTemp = TasFiesta.getTemperature();

                    if (tempFlag == 1) {
                        tempAvg = preTemp;
                        tempFlag = 0;
                    }

                    double _tempSum = 0.0;
                    int _tempidx = 0;

                    if (tempidx[0]) {
                        _tempSum += tempSum[0];
                        _tempidx++;
                        tempidx[0] = 0;
                    }
                    if (tempidx[1]) {
                        _tempSum += tempSum[1];
                        _tempidx++;
                        tempidx[1] = 0;
                    }
                    if (tempidx[2]) {
                        _tempSum += tempSum[2];
                        _tempidx++;
                        tempidx[2] = 0;
                    }

                    if (_tempidx)
                        tempAvg = _tempSum / _tempidx;

                    curValue3 = String((tempAvg + preTemp) / 2);

                    sensing_flag = 3;
                }
            }
            else if (sensing_flag == 0 && currentMillis - hum_sensing_previousMillis >= hum_sensing_interval) {
                hum_sensing_previousMillis = currentMillis;

                if (state == "create_cin") {
                    // guide: in here generate sensing data
                    // if get sensing data directly, assign curValue sensing data and set sensing_flag to 1
                    // if request sensing data to sensor, set sensing_flag to 0, in other code of receiving sensing data, assign curValue sensing data and set sensing_flag to 1
                    preHum = TasFiesta.getHumidity();
                    curValue4 = String(preHum);

                    sensing_flag = 4;
                }
            }
            else if (sensing_flag == 0 && co2 && currentMillis - co2_sensing_previousMillis >= co2_sensing_interval) {
                co2_sensing_previousMillis = currentMillis;

                if (state == "create_cin") {
                    TasFiesta.setEnvironmentalData((uint8_t)preHum, preTemp);
                    // guide: in here generate sensing data
                    // if get sensing data directly, assign curValue sensing data and set sensing_flag to 1
                    // if request sensing data to sensor, set sensing_flag to 0, in other code of receiving sensing data, assign curValue sensing data and set sensing_flag to 1
                    int CO2 = TasFiesta.getCCS().CO2;
                    curValue5 = String(int(CO2));

                    sensing_flag = 5;
                }
            }
            else {
                if (state == "create_cin") {
                    if (sensing_flag == 1) {
                        rand_str(req_id, 8);
                        nCube.createCin(req_id, (nCube.resource[2].to + "/" + nCube.resource[2].rn), curValue);
                        digitalWrite(LEDPIN, HIGH);
                        sensing_flag = 0;
                    }
                    else if (sensing_flag == 2) {
                        rand_str(req_id, 8);
                        nCube.createCin(req_id, (nCube.resource[3].to + "/" + nCube.resource[3].rn), curValue2);
                        digitalWrite(LEDPIN, HIGH);
                        sensing_flag = 0;
                    }
                    else if (sensing_flag == 3) {
                        rand_str(req_id, 8);
                        nCube.createCin(req_id, (nCube.resource[4].to + "/" + nCube.resource[4].rn), curValue3);
                        digitalWrite(LEDPIN, HIGH);
                        sensing_flag = 0;
                    }
                    else if (sensing_flag == 4) {
                        rand_str(req_id, 8);
                        nCube.createCin(req_id, (nCube.resource[5].to + "/" + nCube.resource[5].rn), curValue4);
                        digitalWrite(LEDPIN, HIGH);
                        sensing_flag = 0;
                    }
                    else if (sensing_flag == 5 && co2) {
                        rand_str(req_id, 8);
                        nCube.createCin(req_id, (nCube.resource[6].to + "/" + nCube.resource[6].rn), curValue5);
                        digitalWrite(LEDPIN, HIGH);
                        sensing_flag = 0;
                    }

                    if (control_flag == 1) {
                        control_flag = 0;
                        // guide: in here control action code along to noti_con

                        if (noti_con == "active") {
                            OTAClient.start();   // active OTAClient upgrad process
                        }

                        String resp_body = "";
                        resp_body += "{\"rsc\":\"2000\",\"to\":\"\",\"fr\":\"" + nCube.getAeid() + "\",\"pc\":\"\",\"rqi\":\"" + resp_rqi + "\"}";
                        resp_body.toCharArray(body_buff, resp_body.length() + 1);
                        nCube.response(body_buff);
                    }
                    if (control_flag == 2) {
                        control_flag = 0;
                        // guide: in here control action code along to noti_con

                        tempSum[0] = noti_con.toFloat();
                        tempidx[0]++;

                        String resp_body = "";
                        resp_body += "{\"rsc\":\"2000\",\"to\":\"\",\"fr\":\"" + nCube.getAeid() + "\",\"pc\":\"\",\"rqi\":\"" + resp_rqi + "\"}";
                        resp_body.toCharArray(body_buff, resp_body.length() + 1);
                        nCube.response(body_buff);
                    }
                    if (control_flag == 3) {
                        control_flag = 0;
                        // guide: in here control action code along to noti_con

                        tempSum[1] = noti_con.toFloat();
                        tempidx[1]++;

                        String resp_body = "";
                        resp_body += "{\"rsc\":\"2000\",\"to\":\"\",\"fr\":\"" + nCube.getAeid() + "\",\"pc\":\"\",\"rqi\":\"" + resp_rqi + "\"}";
                        resp_body.toCharArray(body_buff, resp_body.length() + 1);
                        nCube.response(body_buff);
                    }
                    if (control_flag == 4) {
                        control_flag = 0;
                        // guide: in here control action code along to noti_con

                        tempSum[2] = noti_con.toFloat();;
                        tempidx[2]++;

                        String resp_body = "";
                        resp_body += "{\"rsc\":\"2000\",\"to\":\"\",\"fr\":\"" + nCube.getAeid() + "\",\"pc\":\"\",\"rqi\":\"" + resp_rqi + "\"}";
                        resp_body.toCharArray(body_buff, resp_body.length() + 1);
                        nCube.response(body_buff);
                    }
                }
            }
        }
        else {
            OTAClient.poll();
        }
    }
    else {
        digitalWrite(LEDPIN, HIGH);
        delay(500);
        digitalWrite(LEDPIN, LOW);
        delay(500);
    }
}
